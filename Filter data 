{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/pperorin/Project-Theory-Com/blob/main/Filter%20data%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "t-5yqbGBkM7I"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from datetime import datetime\n",
        "from math import radians, cos, sin, asin, sqrt\n",
        "pd.options.mode.chained_assignment = None  # default='warn'"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "\n",
        "drive.mount('/content/gdrive')  #ดึง drive มาทำงาน"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yZfKXVwikZJc",
        "outputId": "c526e13f-d974-45ab-d307-115972d4fa9b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/gdrive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def haversine(lon1, lat1, lon2, lat2):\n",
        "    # convert decimal degrees to radians \n",
        "    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])\n",
        "    dlon = lon2 - lon1 \n",
        "    dlat = lat2 - lat1 \n",
        "    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2\n",
        "    c = 2 * asin(sqrt(a)) \n",
        "    # Radius of earth in kilometers is 6371\n",
        "    km = 6371* c\n",
        "    m = km * 1000\n",
        "    return m"
      ],
      "metadata": {
        "id": "RPTMKyGo298o"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def pickUp(month,day,hour):    \n",
        "    df = pd.read_csv(\"gdrive/My Drive/taxi-data/2020/2020\"+month+\"/2020\"+month+day+\"/2020\"+month+day+\"-\"+hour+\".csv\")\n",
        "    df = df.sort_values([\"VehicleID\",\"timestamp\"])\n",
        "    df = df.drop(columns=\"Unnamed: 0\")\n",
        "    # df = df[df.BKK == True]\n",
        "    df2 = pd.DataFrame()\n",
        "    UniqueID = df['VehicleID'].unique()\n",
        "    a = df.groupby([\"VehicleID\"])\n",
        "    for i in UniqueID:\n",
        "        b = a.get_group(i)\n",
        "        # print('b',b)\n",
        "        pickup_group = b[(b.pickup == True)].reset_index()\n",
        "        dropoff_group = b[(b.dropoff == True)].reset_index()\n",
        "        # if(abs(pickup_group['timestamp'].size - dropoff_group['timestamp'].size) > 1):\n",
        "        #   print('VehicleID :',pickup_group['VehicleID'],'pickup :',pickup_group['timestamp'],'\\ndropoff :',dropoff_group['timestamp']);\n",
        "        # print('pickup :',pickup_group['VehicleID'].size , 'dropoff :',dropoff_group['VehicleID'].size)\n",
        "\n",
        "        if(pickup_group['VehicleID'].size >= 1 & dropoff_group['VehicleID'].size >= 1): # เช็คว่าอย่างน้อยต้องมี รับ - ส่ง อยู่ในเดือนเดียวกัน\n",
        "\n",
        "          pickup_ts_first = datetime.strptime(pickup_group['timestamp'].iloc[0],\"%Y-%m-%d %H:%M:%S\")\n",
        "          dropoff_ts_first = datetime.strptime(dropoff_group['timestamp'].iloc[0],\"%Y-%m-%d %H:%M:%S\")\n",
        "\n",
        "          if (pickup_ts_first > dropoff_ts_first): # ดูว่า dropoff ตัวแรกมาจากเดือนที่แล้วหรือเปล่า\n",
        "             dropoff_group=dropoff_group.drop([0])\n",
        "            #  print('strat')\n",
        "            #  print('pick :',pickup_ts_first)\n",
        "            #  print('drop :',dropoff_ts_first)\n",
        "            #  print(dropoff_group)\n",
        "\n",
        "            #  print('drop')\n",
        "            #  dropoff_group=dropoff_group.drop([0])\n",
        "            #  print(dropoff_group)\n",
        "            #  print('stop')\n",
        "          \n",
        "          if(pickup_group['timestamp'].size > 1 & dropoff_group['timestamp'].size > 1):\n",
        "            pickup_ts_last = datetime.strptime(pickup_group['timestamp'].iloc[-1],\"%Y-%m-%d %H:%M:%S\")\n",
        "            dropoff_ts_last = datetime.strptime(dropoff_group['timestamp'].iloc[-1],\"%Y-%m-%d %H:%M:%S\")\n",
        "            if(dropoff_ts_last < pickup_ts_last & dropoff_ts_last & dropoff_ts_last): # ดูว่า pickup ก่อนสิ้นเดือนหรือเปล่า\n",
        "              pickup_group=pickup_group.drop([-1])\n",
        "        \n",
        "        # if(pickup_group['timestamp'].size != dropoff_group['timestamp'].size):\n",
        "        #   print(pickup_group['VehicleID'])\n",
        "        print('pickup :',pickup_group['timestamp'].size , 'dropoff :',dropoff_group['timestamp'].size)\n",
        "        \n",
        "        \n",
        "\n",
        "         \n",
        "            \n",
        "          \n",
        "            \n",
        "            \n",
        "    return df2\n",
        "\n",
        "# 1->0 = pick / 0->1 = drop\n",
        "dfs = []\n",
        "months = ['01']\n",
        "hours = ['00','01','02','03','04','05','06','07','08','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23']\n",
        "days = ['01','02','03','04','05','06','07','08','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31']\n",
        "#for month in months:\n",
        " #   if month == '01':\n",
        "  #      for day in days:\n",
        "   #         for hour in hours:\n",
        "    #            df2 = pickUp(month,day,hour)\n",
        "     #           dfs.append(df2)\n",
        "      #          print(day+'-'+hour)\n",
        "       #     df3 = pd.concat(dfs)\n",
        "        #    df3.to_csv(\"2020\"+month+\"/PickUp2020\"+month+day+\".csv\")\n",
        "         #   dfs = []\n",
        "print(pickUp('01','01','00'))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "90PCrDLu2-tu",
        "outputId": "a3e4ad91-49b3-4340-89c2-6f00af2c5daa"
      },
      "execution_count": 96,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 2 dropoff : 2\n",
            "pickup : 2 dropoff : 2\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 4 dropoff : 4\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 2 dropoff : 2\n",
            "pickup : 4 dropoff : 3\n",
            "pickup : 0 dropoff : 1\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 3 dropoff : 4\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 1\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 1\n",
            "pickup : 0 dropoff : 1\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 4 dropoff : 4\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 1\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 2 dropoff : 2\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 1 dropoff : 0\n",
            "pickup : 2 dropoff : 2\n",
            "pickup : 1 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 1 dropoff : 0\n",
            "pickup : 0 dropoff : 1\n",
            "pickup : 1 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 1 dropoff : 0\n",
            "pickup : 1 dropoff : 1\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 2 dropoff : 2\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 1 dropoff : 1\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 3 dropoff : 3\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 1\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 2 dropoff : 2\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 1 dropoff : 2\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 1\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 1 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 3 dropoff : 3\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 3 dropoff : 2\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 1 dropoff : 2\n",
            "pickup : 1 dropoff : 1\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 2 dropoff : 1\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 1 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 2 dropoff : 2\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 3 dropoff : 2\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 2 dropoff : 1\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 1 dropoff : 2\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 1\n",
            "pickup : 2 dropoff : 2\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 3 dropoff : 4\n",
            "pickup : 4 dropoff : 3\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 1 dropoff : 2\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 4 dropoff : 4\n",
            "pickup : 3 dropoff : 2\n",
            "pickup : 3 dropoff : 2\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 3 dropoff : 4\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 2 dropoff : 2\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 2 dropoff : 2\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 2 dropoff : 2\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 2 dropoff : 2\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 1\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 1 dropoff : 1\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 1 dropoff : 2\n",
            "pickup : 1 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 3 dropoff : 2\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 2 dropoff : 2\n",
            "pickup : 2 dropoff : 2\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 2 dropoff : 2\n",
            "pickup : 3 dropoff : 3\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 1 dropoff : 1\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 2 dropoff : 2\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 3 dropoff : 3\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 2 dropoff : 2\n",
            "pickup : 2 dropoff : 2\n",
            "pickup : 1 dropoff : 1\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 1 dropoff : 1\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 2 dropoff : 2\n",
            "pickup : 2 dropoff : 2\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 3 dropoff : 4\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 1\n",
            "pickup : 1 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 4 dropoff : 4\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 1 dropoff : 0\n",
            "pickup : 4 dropoff : 3\n",
            "pickup : 1 dropoff : 2\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 3 dropoff : 3\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 2 dropoff : 2\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 2 dropoff : 2\n",
            "pickup : 1 dropoff : 2\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 1 dropoff : 2\n",
            "pickup : 2 dropoff : 2\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 1\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 6 dropoff : 6\n",
            "pickup : 0 dropoff : 1\n",
            "pickup : 3 dropoff : 4\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 5 dropoff : 4\n",
            "pickup : 1 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 2 dropoff : 2\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 1\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 1 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 3 dropoff : 4\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 1 dropoff : 2\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 4 dropoff : 4\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 3 dropoff : 4\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 2 dropoff : 2\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 1 dropoff : 2\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 1 dropoff : 2\n",
            "pickup : 2 dropoff : 2\n",
            "pickup : 1 dropoff : 2\n",
            "pickup : 1 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 1\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n",
            "pickup : 0 dropoff : 0\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-96-0139e1ed0ced>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     67\u001b[0m         \u001b[0;31m#    df3.to_csv(\"2020\"+month+\"/PickUp2020\"+month+day+\".csv\")\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     68\u001b[0m          \u001b[0;31m#   dfs = []\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 69\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpickUp\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'01'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'01'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'00'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-96-0139e1ed0ced>\u001b[0m in \u001b[0;36mpickUp\u001b[0;34m(month, day, hour)\u001b[0m\n\u001b[1;32m     10\u001b[0m         \u001b[0mb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_group\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m         \u001b[0;31m# print('b',b)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m         \u001b[0mpickup_group\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpickup\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreset_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m         \u001b[0mdropoff_group\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdropoff\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreset_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m         \u001b[0;31m# if(abs(pickup_group['timestamp'].size - dropoff_group['timestamp'].size) > 1):\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/ops/common.py\u001b[0m in \u001b[0;36mnew_method\u001b[0;34m(self, other)\u001b[0m\n\u001b[1;32m     67\u001b[0m         \u001b[0mother\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mitem_from_zerodim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mother\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     68\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 69\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mother\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     70\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     71\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mnew_method\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/arraylike.py\u001b[0m in \u001b[0;36m__eq__\u001b[0;34m(self, other)\u001b[0m\n\u001b[1;32m     30\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0munpack_zerodim_and_defer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"__eq__\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__eq__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mother\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 32\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_cmp_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mother\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moperator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0meq\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     33\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     34\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0munpack_zerodim_and_defer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"__ne__\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/series.py\u001b[0m in \u001b[0;36m_cmp_method\u001b[0;34m(self, other, op)\u001b[0m\n\u001b[1;32m   5502\u001b[0m             \u001b[0mres_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcomparison_op\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mop\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5503\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5504\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_construct_result\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mres_values\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mres_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5505\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5506\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_logical_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mother\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mop\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/series.py\u001b[0m in \u001b[0;36m_construct_result\u001b[0;34m(self, result, name)\u001b[0m\n\u001b[1;32m   2943\u001b[0m         \u001b[0;31m# We do not pass dtype to ensure that the Series constructor\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2944\u001b[0m         \u001b[0;31m#  does inference in the case where `result` has object-dtype.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2945\u001b[0;31m         \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_constructor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2946\u001b[0m         \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__finalize__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2947\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/series.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, data, index, dtype, name, copy, fastpath)\u001b[0m\n\u001b[1;32m    313\u001b[0m     \u001b[0;31m# Constructors\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    314\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 315\u001b[0;31m     def __init__(\n\u001b[0m\u001b[1;32m    316\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    317\u001b[0m         \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range(c['lat'].size):\n",
        "            lat1 = c['lat'].iloc[i]\n",
        "            lon1 = c['lon'].iloc[i]\n",
        "            lat2 = b['lat'].iloc[b['lat'].index.get_loc(c.index[i])-1]\n",
        "            lon2 = b['lon'].iloc[b['lon'].index.get_loc(c.index[i])-1]\n",
        "            distance = haversine(lon1,lat1,lon2,lat2)\n",
        "            noloop = 1\n",
        "            while distance < 50:\n",
        "                noloop += 1\n",
        "                try:\n",
        "                    lat2 = b['lat'].iloc[b['lat'].index.get_loc(c.index[i])-noloop]\n",
        "                    lon2 = b['lon'].iloc[b['lon'].index.get_loc(c.index[i])-noloop]\n",
        "                    distance = haversine(lon1,lat1,lon2,lat2)\n",
        "                finally:    \n",
        "                    break\n",
        "              \n",
        "            c[\"timeBefore\"] = b[\"timestamp\"].iloc[b['timestamp'].index.get_loc(c.index[i])-noloop]\n",
        "            c[\"distance\"] = distance\n",
        "            d1 = datetime.strptime(c[\"timestamp\"].iloc[i],\"%Y-%m-%d %H:%M:%S\")\n",
        "            d2 = datetime.strptime(c[\"timeBefore\"].iloc[i],\"%Y-%m-%d %H:%M:%S\") \n",
        "            diff = (d1.minute - d2.minute)\n",
        "            diff_second = (d1.second - d2.second)\n",
        "            c[\"waitT\"] = diff + (diff_second)/60\n",
        "            df2 = pd.concat([df2,c.take([i])])\n",
        "           print(diff + (diff_second)/60)"
      ],
      "metadata": {
        "id": "p-bGTds1kZ8D"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}